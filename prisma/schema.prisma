// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlists Playlist[]
  favorites Favorite[]
  watchHistory WatchHistory[]
}

enum MediaType {
  VIDEO
  AUDIO
  IMAGE
}

enum MediaCategory {
  MOVIE
  TV_SHOW
  MUSIC
  PODCAST
  OTHER
}

model Media {
  id          String        @id @default(cuid())
  title       String
  filePath    String        @unique
  fileName    String
  fileSize    BigInt
  duration    Int?          // en secondes
  mimeType    String
  type        MediaType
  category    MediaCategory @default(OTHER)
  year        Int?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  metadata    Metadata?
  playlists   PlaylistMedia[]
  favorites   Favorite[]
  watchHistory WatchHistory[]

  @@index([type])
  @@index([category])
  @@index([title])
}

model Metadata {
  id              String   @id @default(cuid())
  mediaId         String   @unique
  tmdbId          Int?
  imdbId          String?
  overview        String?  @db.Text
  posterPath      String?
  backdropPath    String?
  rating          Float?
  voteCount       Int?
  releaseDate     DateTime?
  genres          String[] // tableau de genres
  cast            Json?    // Liste des acteurs
  director        String?
  producers       String[]
  runtime         Int?
  tagline         String?
  originalLanguage String?
  spokenLanguages String[]
  budget          BigInt?
  revenue         BigInt?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@index([tmdbId])
}

model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  userId      String
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  media PlaylistMedia[]

  @@index([userId])
}

model PlaylistMedia {
  id         String   @id @default(cuid())
  playlistId String
  mediaId    String
  position   Int
  addedAt    DateTime @default(now())

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  media    Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([playlistId, mediaId])
  @@index([playlistId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  mediaId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId])
  @@index([userId])
}

model WatchHistory {
  id             String   @id @default(cuid())
  userId         String
  mediaId        String
  watchedAt      DateTime @default(now())
  progress       Int      @default(0) // Position en secondes
  completed      Boolean  @default(false)

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@index([userId, mediaId])
  @@index([watchedAt])
}
